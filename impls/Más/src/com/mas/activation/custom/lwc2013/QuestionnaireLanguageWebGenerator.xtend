package com.mas.activation.custom.lwc2013

import com.google.inject.Inject
import com.google.inject.Injector
import com.mas.ApplicationServiceProvider
import com.mas.activation.custom.lwc2013.QuestionnaireLanguage.ComputedItem
import com.mas.activation.custom.lwc2013.QuestionnaireLanguage.ConditionalGroup
import com.mas.activation.custom.lwc2013.QuestionnaireLanguage.DataTypeLiteral
import com.mas.activation.custom.lwc2013.QuestionnaireLanguage.Form
import com.mas.activation.custom.lwc2013.QuestionnaireLanguage.FormElement
import com.mas.activation.custom.lwc2013.QuestionnaireLanguage.Question
import com.mas.activation.custom.lwc2013.QuestionnaireLanguage.Questionnaire
import com.mas.activation.custom.lwc2013.QuestionnaireLanguage.QuestionnaireLanguagePackage
import com.mas.activation.custom.lwc2013.QuestionnaireLanguage.TypeLiteral
import com.mas.activation.generation.ITextGenerator
import org.json.JSONArray

import static com.mas.activation.custom.lwc2013.QuestionnaireLanguage.DataTypes.*

// not a Singleton because of "running state" elementIdMapper and formIdMapper
class QuestionnaireLanguageWebGenerator implements ITextGenerator {

	@Inject extension ApplicationServiceProvider
	@Inject Injector injector

	override generate(JSONArray model) {
		val pojoModel = <Questionnaire>unmarshaller(QuestionnaireLanguagePackage.eINSTANCE.ePackageContext, model).result.head
		jsGenerator = new JavascriptGenerator(pojoModel, elementIdMapper, formIdMapper, injector)
		pojoModel.html
	}

	extension IdMapper<FormElement> elementIdMapper = new IdMapper<FormElement>("elt")
	val formIdMapper = new IdMapper<Form>("form")

	var JavascriptGenerator jsGenerator


	@Inject extension ExpressionExtensions
	@Inject extension StructureExtensions
	@Inject extension TypeChecker

	def private html(Questionnaire it)
		'''
		<!DOCTYPE html>
		<html>
			<head>
				<meta charset="UTF-8">
				<title>Questionnaire - generated by M&aacute;s</title>
				<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>
				<script type="text/javascript" src="/resources/QL/autoNumeric.js"></script>
				<script  type="text/javascript">
					«jsGenerator.javascript»
				</script>
			</head>
		<body>


		<h1>Questionnaire</h1>

		«FOR f : forms»
			«f.html»
		«ENDFOR»

		<h1>Validation</h1>

		<p>The questionnaire model validates as follows.</p>

		<h2>Static type check of expressions</h2>

		<table>
			<tr>
				<th>issue</th>
				<th>severity</th>
				<th>expression</th>
			</tr>
			«FOR i : allExpressiveElements.map[expr.check].flatten»
				<tr>
					<td>«i.message»</td>
					<td>«i.severity.name»</td>
					<td>«i.expr.toRegularString»</td>
				</tr>
			«ENDFOR»
		</table>

		</body>
		</html>
		'''

	def private html(Form it)
		'''
		<h2>Form: «name»</h2>

		<div class="form" id="«formIdMapper._id(it)»">
			«FOR e : elements»
				«e.elementAsHtml»
			«ENDFOR»
		</div>

		'''

	// TODO  provide static type checking (including cyclicity) here, as part of the Activation - at first, and as double check of JS validation
	// TODO  move towards building the DOM directly in JS


	def private dispatch CharSequence elementAsHtml(Question it)
		'''
		<div class="simpleFormElement"><label for="«_id»">«label»</label><input type="«type.htmlType»" id="«_id»"></input></div>
		'''

	def private htmlType(TypeLiteral it) {
		switch it {
			DataTypeLiteral:
				switch it.dataType {
					case BOOLEAN:	"checkbox"
					case DECIMAL:	"number"
					case INTEGER:	"number"
					default:		"text"
				}
			default:
				throw new UnsupportedOperationException('''cannot determine HTML type for type literal «it»''')
		}
	}

	def private dispatch CharSequence elementAsHtml(ComputedItem it)
		'''
		<div class="simpleFormElement"><label for="«_id»">«label»</label><input type="text" id="«_id»" disabled="true"></input></div>
		'''


	def private dispatch CharSequence elementAsHtml(ConditionalGroup it) {
		'''
		<div class="group" id="«_id»">
			«FOR e : elements»
				«e.elementAsHtml»
			«ENDFOR»
		</div>
		'''
	}

}
